[{"C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\index.tsx":"1","C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\reportWebVitals.ts":"2","C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\App.tsx":"3","C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\components\\Home\\index.tsx":"4","C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\components\\Button\\index.tsx":"5","C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\components\\ResizableTextArea\\index.tsx":"6"},{"size":521,"mtime":1608617910044,"results":"7","hashOfConfig":"8"},{"size":440,"mtime":1608157611217,"results":"9","hashOfConfig":"8"},{"size":814,"mtime":1609782947976,"results":"10","hashOfConfig":"8"},{"size":2705,"mtime":1609782936719,"results":"11","hashOfConfig":"8"},{"size":700,"mtime":1608157611116,"results":"12","hashOfConfig":"8"},{"size":2005,"mtime":1609782936703,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1edp5fo",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\index.tsx",[],["29","30"],"C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\reportWebVitals.ts",[],"C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\App.tsx",[],"C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\components\\Home\\index.tsx",["31","32"],"import React, {useEffect, useState} from \"react\";\r\n\r\nimport ResizableTextarea from \"../ResizableTextArea\";\r\nimport Button from \"../Button\";\r\n\r\nimport \"./_index.scss\";\r\n\r\ntype HomeProps = {\r\n    connection?: WebSocket;\r\n    message?: any;\r\n}\r\n\r\nenum STEP {\r\n    PREPROCESSING = \"PREPROCESSING\",\r\n    ANALYZING = \"ANALYZING\",\r\n    POSTPROCESSING = \"POSTPROCESSING\"\r\n}\r\n\r\nconst Home: React.FunctionComponent<HomeProps> = (props) => {\r\n    const [text, setText] = useState<string>();\r\n    const [finishedSteps, setFinishedSteps] = useState<STEP[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [spans, setSpans] = useState<number[]>();\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.message) {\r\n\r\n            if (props.message.includes(STEP.PREPROCESSING)) {\r\n                setFinishedSteps([...finishedSteps, STEP.PREPROCESSING])\r\n            } else if (props.message.includes(STEP.ANALYZING)) {\r\n                setFinishedSteps([...finishedSteps, STEP.ANALYZING])\r\n            } else if (props.message.includes(STEP.POSTPROCESSING)) {\r\n                setFinishedSteps([...finishedSteps, STEP.POSTPROCESSING])\r\n                // setIsLoading(false);\r\n            } else {\r\n                const plainSpans = props.message;\r\n                setSpans(plainSpans.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map((el: string) => (+el)));\r\n            }\r\n        }\r\n\r\n    }, [props.message])\r\n\r\n    const handleOnChange = (value: string) => {\r\n        setText(value);\r\n    }\r\n\r\n    const handleOnCheck = () => {\r\n        // props.connection && props.connection.send(text ?? '');\r\n        // setFinishedSteps([STEP.PREPROCESSING, STEP.ANALYZING, STEP.POSTPROCESSING]);\r\n        setIsLoading(true);\r\n        setTimeout(() => setIsLoading(false), 4000);\r\n        setTimeout(() => setFinishedSteps([STEP.PREPROCESSING]), 1000);\r\n        setTimeout(() => setFinishedSteps([STEP.PREPROCESSING, STEP.ANALYZING]), 2000);\r\n        setTimeout(() => setFinishedSteps([STEP.PREPROCESSING, STEP.ANALYZING, STEP.POSTPROCESSING]), 3000);\r\n        setTimeout(() => setSpans([1]), 3000);\r\n    }\r\n\r\n    return <div className=\"main--container\">\r\n        <ResizableTextarea className=\"main--container__input\" onChange={handleOnChange} spans={spans}/>\r\n        <div className=\"main--container__results\">\r\n            <Button className=\"analyze\" isLoading={isLoading} onClick={handleOnCheck}> Analyze text </Button>\r\n            <ul>\r\n                {finishedSteps.map((step) => (\r\n                    <li key={step}><p className=\"has-text-weight-bold is-capitalized is-italic\">{step as STEP}...</p>\r\n                    </li>))}\r\n            </ul>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default Home;","C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\components\\Button\\index.tsx",[],"C:\\Users\\Cristian Ninicu\\Documents\\GitHub\\toxic-spans-detection\\app-ui\\src\\components\\ResizableTextArea\\index.tsx",["33","34"],"import React, {FormEvent, useEffect, useState} from \"react\";\r\n\r\nimport \"./_index.scss\";\r\n\r\ntype ResizableTextareaProps = {\r\n    onChange?: any;\r\n    className?: string;\r\n    value?: string;\r\n    spans?: number[];\r\n}\r\n\r\n\r\nconst updateTextColors = (text: string, spans:number[]) => {\r\n    const end = \"</span>\";\r\n    const start = \"<span style='color: red'>\";\r\n\r\n    spans = []\r\n\r\n    for (let j = 0; j < text.length; j++) {\r\n        if (text[j] === ' ') {\r\n            j += 1;\r\n\r\n            while (j < text.length && text[j] !== ' ') {\r\n                spans.push(j);\r\n                j += 1;\r\n            }\r\n\r\n            spans.push(j);\r\n        }\r\n    }\r\n\r\n    let lastSpan = spans[spans.length - 1];\r\n\r\n    for (let i = spans.length - 2; i >= 0; i--) {\r\n        if ((spans[i + 1] - spans[i]) > 1 || i == 0) {\r\n\r\n            text = [text.slice(0, lastSpan), end, text.slice(lastSpan)].join('');\r\n            text = [text.slice(0, spans[i + 1] - 1), start, text.slice(spans[i + 1] - 1)].join('');\r\n\r\n            lastSpan = spans[i];\r\n        }\r\n    }\r\n\r\n    return text;\r\n}\r\n\r\nconst ResizableTextarea: React.FunctionComponent<ResizableTextareaProps> = (props) => {\r\n    const [value, setValue] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        let el = document.getElementById(\"textarea\");\r\n        if (el) el.innerHTML = updateTextColors(value, props.spans ?? []);\r\n    }, [props.spans])\r\n\r\n    const handleChange = (event: FormEvent<HTMLDivElement>) => {\r\n        if (event.currentTarget && event.currentTarget.textContent) {\r\n            props.onChange(event.currentTarget.textContent);\r\n            setValue(event.currentTarget.textContent);\r\n        }\r\n    };\r\n\r\n        return (\r\n            <p\r\n                contentEditable={true}\r\n                id=\"textarea\"\r\n                placeholder={'Enter your text here...'}\r\n                className={`text ${props.className ?? \"\"}`}\r\n                onInput={handleChange}\r\n            />\r\n        )\r\n}\r\n\r\nexport default ResizableTextarea;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":20,"column":12,"nodeType":"41","messageId":"42","endLine":20,"endColumn":16},{"ruleId":"43","severity":1,"message":"44","line":42,"column":8,"nodeType":"45","endLine":42,"endColumn":23,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":35,"column":47,"nodeType":"49","messageId":"50","endLine":35,"endColumn":49},{"ruleId":"43","severity":1,"message":"51","line":53,"column":8,"nodeType":"45","endLine":53,"endColumn":21,"suggestions":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'text' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'finishedSteps'. Either include it or remove the dependency array. You can also do a functional update 'setFinishedSteps(f => ...)' if you only need 'finishedSteps' in the 'setFinishedSteps' call.","ArrayExpression",["55"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["56"],"no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [finishedSteps, props.message]",{"range":"61","text":"62"},"Update the dependencies array to be: [props.spans, value]",{"range":"63","text":"64"},[1397,1412],"[finishedSteps, props.message]",[1362,1375],"[props.spans, value]"]